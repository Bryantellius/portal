{"version":3,"file":"bearerstrategy.js","sourceRoot":"","sources":["../../middleware/bearerstrategy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wDAAgC;AAChC,gFAAkD;AAClD,qDAAsD;AACtD,0DAA8B;AAG9B,kBAAQ,CAAC,GAAG,CACV,IAAI,8BAAc,CAAC,QAAQ,CAAC,CAAO,KAAK,EAAE,IAAI,EAAE,EAAE;IAChD,IAAI;QACF,MAAM,SAAS,GAAG,MAAM,mBAAU,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,GAAQ,MAAM,gBAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAClB;aAAM;YACL,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACnB;KACF;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CACH,CAAC","sourcesContent":["import passport from \"passport\";\nimport BearerStrategy from \"passport-http-bearer\";\nimport { ValidToken } from \"../utils/security/tokens\";\nimport db from \"../db/models\";\nimport { IPayload } from \"../utils/types\";\n\npassport.use(\n  new BearerStrategy.Strategy(async (token, next) => {\n    try {\n      const authToken = await ValidToken(token);\n      let [user]: any = await db.User.findByPk(authToken.userId);\n      if (user) {\n        next(null, user);\n      } else {\n        next(null, false);\n      }\n    } catch (error) {\n      next(error);\n    }\n  })\n);\n"]}