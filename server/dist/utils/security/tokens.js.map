{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../../../utils/security/tokens.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,gEAA+B;AAC/B,6DAAqC;AACrC,0DAAkC;AAG3B,MAAM,WAAW,GAAG,CAAO,OAAiB,EAAE,EAAE;IACrD,OAAO,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACxD,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAM,CAAC,UAAU,CAAC,CAAC;IACnD,MAAM,gBAAM,CAAC,WAAW,CAAC,MAAM,CAAC;QAC9B,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC;AATW,QAAA,WAAW,eAStB;AAEK,MAAM,UAAU,GAAG,CAAO,KAAU,EAAE,EAAE;IAC7C,MAAM,OAAO,GAAuB,sBAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtD,MAAM,cAAc,GAAQ,MAAM,gBAAM,CAAC,WAAW,CAAC,OAAO,CAAC;QAC3D,KAAK,EAAE;YACL,EAAE,EAAE,OAAO,CAAC,aAAa;SAC1B;KACF,CAAC,CAAC;IAEH,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;SAAM;QACL,OAAO,OAAO,CAAC;KAChB;AACH,CAAC,CAAA,CAAC;AAbW,QAAA,UAAU,cAarB","sourcesContent":["import crypto from \"crypto\";\nimport jwt from \"jsonwebtoken\";\nimport models from \"../../db/models\";\nimport config from \"../../config\";\nimport { IPayload } from \"../types\";\n\nexport const CreateToken = async (payload: IPayload) => {\n  payload.unique = crypto.randomBytes(32).toString(\"hex\");\n  const token = jwt.sign(payload, config.secret_key);\n  await models.AccessToken.create({\n    userId: payload.userid,\n    token: token\n  });\n\n  return token;\n};\n\nexport const ValidToken = async (token: any) => {\n  const payload: IPayload = <IPayload>jwt.decode(token);\n  const validatedToken: any = await models.AccessToken.findOne({\n    where: {\n      id: payload.accesstokenid\n    }\n  });\n\n  if (!validatedToken) {\n    throw new Error(\"Invalid Token\");\n  } else {\n    return payload;\n  }\n};\n"]}