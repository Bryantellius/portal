{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../controllers/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import db from \"../db/models\";\nimport path from \"path\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { writeFile } from \"fs\";\nimport { hashPassword } from \"../utils/security/passwords\";\n\nconst findById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { id } = req.params;\n        const user = await db.User.findByPk(parseInt(id), {\n            include: [{\n                all: true,\n                nested: true\n            }]\n        });\n        \n        console.log(user);\n        res.json(user);\n    } catch (error) {\n        next(error);\n    }\n};\n\nconst createUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { user, classList } = req.body;\n\n        user.password = hashPassword(user.password);\n        const createResponse: any = await db.User.create(user);\n        classList.userId = createResponse.insertId;\n        const courseSubscriptionResponse: any = await db.ClassList.create(classList);\n\n        res.json(courseSubscriptionResponse);\n    } catch (error) {\n        next(error);\n    }\n};\n\nconst updateUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { id } = req.params;\n        const user = req.body;\n    \n        if (user.avatarUrl) {\n          user.avatarUrl = user.avatarUrl + path.extname(user.fileName);\n          delete user.fileName;\n        }\n    \n        const updateUserResponse: any = await db.User.update(user, {\n          where: {\n            id: id\n          }\n        });\n    \n        res.json(user);\n      } catch (error) {\n        next(error);\n      }\n}\n\nconst uploadAssets = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        if (!req.files) {\n            res.json({ msg: \"no go bro\" });\n            return;\n        }\n\n        const newImage: any = req.files.image\n        const id = req.body.id;\n        const imagePath = path.join(\n            __dirname,\n            `../public/assets/img/${ id }${ path.extname(newImage.name) }`\n        );\n\n        const buffer = Buffer.from(newImage.data, \"base64\");\n\n        writeFile(imagePath, buffer, (err: Error) => {\n            if (err) {\n                next(err);\n            }\n            res.send({ msg: \"File Uploaded\" });\n        });\n    } catch (err) {\n        next(err);\n    }\n}\n\nexport default {\n    findById,\n    createUser,\n    updateUser,\n    uploadAssets\n};"]}