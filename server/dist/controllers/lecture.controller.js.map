{"version":3,"file":"lecture.controller.js","sourceRoot":"","sources":["../../controllers/lecture.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0DAA8B;AAE9B,gDAAwB;AAExB,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,gBAAE,CAAC;AAE/B,MAAM,OAAO,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAEtE,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAEjC,IAAI,QAAQ,GAAe;QACvB,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;KAC9B,CAAC;IAEF,IAAI,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE;QACzB,QAAQ,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,MAAM;YACb,UAAU,EAAE,CAAE,cAAc,CAAE;YAC9B,KAAK,EAAE;gBACH,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,YAAY;aACxC;SACJ,CAAC,CAAC;KACN;IAED,IAAI,aAAa,GAAQ,EAAE,CAAC;IAE5B,IAAI,SAAS,KAAK,SAAS,EAAE;QACzB,aAAa,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;KAClD;IAED,MAAM,WAAW,GAAG;QAChB,KAAK,EAAE,aAAa;QACpB,OAAO,EAAE,QAAQ;KACpB,CAAA;IAED,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAEpD,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvB,CAAC,CAAA,CAAA;AAED,MAAM,QAAQ,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACvE,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;QAC5D,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;KACzB,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC,CAAA,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAChF,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAE1B,MAAM,OAAO,GAAQ,MAAM,gBAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEnD,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3E,OAAO,CAAC,EAAE,CAAC;IACX,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC3B,CAAC,CAAA,CAAA;AAED,kBAAe;IACX,OAAO;IACP,QAAQ;IACR,iBAAiB;CACpB,CAAC","sourcesContent":["import db from \"../db/models\";\nimport { Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\n\nconst { Lecture, Module } = db;\n\nconst findAll = async (req: Request, res: Response, next: NextFunction) => {\n\n    const { lectureId } = req.params;\n\n    let includes: Array<any> = [\n        { all: true, nested: true }\n    ];\n\n    if (req.params.curriculumId) {\n        includes.push({\n            model: Module,\n            attributes: [ \"curriculumId\" ],\n            where: {\n                curriculumId: req.params.curriculumId\n            }\n        });\n    }\n\n    let whereCriteria: any = {};\n\n    if (lectureId !== undefined) {\n        whereCriteria.lectureId = req.params.lectureId;\n    }\n\n    const findOptions = {\n        where: whereCriteria,\n        include: includes\n    }\n    \n    const lectures = await Lecture.findAll(findOptions);\n\n    res.json(lectures);\n}\n\nconst findById = async (req: Request, res: Response, next: NextFunction) => {\n    const lecture = await Lecture.findByPk(parseInt(req.params.id), {\n        include: { all: true }\n    });\n\n    res.json(lecture);\n};\n\nconst getLectureContent = async (req: Request, res: Response, next: NextFunction) => {\n    const { id } = req.params;\n\n    const lecture: any = await db.Lecture.findByPk(id);\n\n    const filePath = path.join(process.cwd(), \"../lectures\", lecture.fileName);\n    lecture.id;\n    res.sendFile(filePath);\n}\n\nexport default {\n    findAll,\n    findById,\n    getLectureContent\n};"]}